// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
struct Voxel 
{
    int ID;
    float3 pos;
    float4 color;
};

// Direction in which we will look for other voxels
static const float3 DIRECTIONS[6] =
{
    float3(0,0,-1),//back
    float3(0,0,1),//front
    float3(-1,0,0),//left
    float3(1,0,0),//right
    float3(0,-1,0),//bottom
    float3(0,1,0)//top
};

// Verticies of a single voxel
static const float3 VOXEL_VERTS[8] =
{
    float3(0,0,0),//0
    float3(1,0,0),//1
    float3(0,1,0),//2
    float3(1,1,0),//3

    float3(0,0,1),//4
    float3(1,0,1),//5
    float3(0,1,1),//6
    float3(1,1,1),//7
};

// Triangles of a single voxel
static const int VOXEL_VERT_IDXS[6][4] =
{
    {0,1,2,3},
    {4,5,6,7},
    {4,0,6,2},
    {5,1,7,3},
    {0,1,4,5},
    {2,3,6,7},
};

// UVs of a single voxel
static const float2 VOXEL_UVS[4] = 
{
    float2(0,0),
    float2(0,1),
    float2(1,0),
    float2(1,1)
};

// Triangles of a single voxel
static const int VOXEL_TRIS[6][6] =
{
    {0,2,3,0,3,1},
    {0,1,2,1,3,2},
    {0,2,3,0,3,1},
    {0,1,2,1,3,2},
    {0,1,2,1,3,2},
    {0,2,3,0,3,1},
};

// Normals of a single voxel
static const float3 VOXEL_NORMS[6] =
{
    float3(0,0,-1), // back
    float3(0,0,1),  // forward
    float3(-1,0,0), // left
    float3(1,0,0),  // right
    float3(0,-1,0), // down
    float3(0,1,0),  // up
};

// INPUT
int voxel_count;
float2 voxels_size;
float voxel_scale;
int lod;
StructuredBuffer<Voxel> voxels;

// OUTPUT
RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<float4> colors;
RWStructuredBuffer<float2> uvs;
RWStructuredBuffer<float3> normals;
RWStructuredBuffer<int> faces;
RWStructuredBuffer<int> counters;

inline int IndexFromCoord(float3 idx)
{
    return idx.x + idx.z * voxels_size.x + idx.y * voxels_size.x * voxels_size.x;
}

inline int IndexFromCoord(float x, float y, float z)
{
    return x + z * voxels_size.x + y * voxels_size.x * voxels_size.x;
}

[numthreads(32, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint th_idx = id.x; // 1D index in the voxel array

    // Calculate the number of voxels per row and per slice (layer) considering the LOD
    int voxels_per_row = int(voxels_size.x);
    int voxels_per_layer = voxels_per_row * voxels_per_row;
    int loded_voxels_per_layer = (voxels_per_row/lod) * (voxels_per_row/lod);

    // Calculate coordinates
    int x_coord = (th_idx * lod) % voxels_per_row;
    int z_coord = (((th_idx % loded_voxels_per_layer) * lod) / voxels_per_row) * lod;
    int y_coord = ((th_idx) / (loded_voxels_per_layer)) * lod;

    int idx = IndexFromCoord(x_coord, y_coord, z_coord);

    Voxel voxel = voxels[idx];
    if (voxel.ID == 0) return;
    
    // Average out the color of the voxels in case of lower LODs
    float4 avg_color = float4(0,0,0,0);
    int valid_vox_count = 0;
    for (int x = 0; x < lod; x++)
    {
        for (int z = 0; z < lod; z++)
        {
            for (int y = 0; y < lod; y++)
            {
                float3 position = voxel.pos + float3(x, y, z);
                if (position.x >= 0 && position.x < voxels_size.x &&
                    position.z >= 0 && position.z < voxels_size.x &&
                    position.y >= 0 && position.y < voxels_size.y)
                {
                    Voxel temp_vox = voxels[IndexFromCoord(position)];
                    if (temp_vox.ID != 0)
                    {
                        valid_vox_count += 1;
                        avg_color += temp_vox.color;
                    }
                }
            }
        }   
    }
    avg_color /= valid_vox_count;
    
    int vert_count = 0;
    int face_count = 0;

    // each face
    for (uint i = 0; i < 6; i++)
    {
        // Check if face should be drawn (neighbor check)
        float3 neighbor_pos = voxel.pos + DIRECTIONS[i] * lod;
        if (neighbor_pos.x >= 0 && neighbor_pos.x < voxels_size.x
            && neighbor_pos.z >= 0 && neighbor_pos.z < voxels_size.x
            && neighbor_pos.y >= 0 && neighbor_pos.y < voxels_size.y)
            {
                int neighbor_idx = IndexFromCoord(neighbor_pos);
                if (neighbor_idx < voxel_count && voxels[neighbor_idx].ID != 0)
                {
                    continue;
                }
            }
        

        InterlockedAdd(counters[0], 4, vert_count);
        InterlockedAdd(counters[1], 6, face_count);

        vertices[vert_count] = (VOXEL_VERTS[VOXEL_VERT_IDXS[i][0]] * voxel_scale * lod) + (voxel.pos * voxel_scale);
        uvs[vert_count] = VOXEL_UVS[0];
        colors[vert_count] = avg_color;
        normals[vert_count] = VOXEL_NORMS[i];

        vertices[vert_count + 1] = (VOXEL_VERTS[VOXEL_VERT_IDXS[i][1]] * voxel_scale * lod) + (voxel.pos * voxel_scale);
        uvs[vert_count + 1] = VOXEL_UVS[1];
        colors[vert_count + 1] = avg_color;
        normals[vert_count + 1] = VOXEL_NORMS[i];

        vertices[vert_count + 2] = (VOXEL_VERTS[VOXEL_VERT_IDXS[i][2]] * voxel_scale * lod) + (voxel.pos * voxel_scale);
        uvs[vert_count + 2] = VOXEL_UVS[2];
        colors[vert_count + 2] = avg_color;
        normals[vert_count + 2] = VOXEL_NORMS[i];

        vertices[vert_count + 3] = (VOXEL_VERTS[VOXEL_VERT_IDXS[i][3]] * voxel_scale * lod) + (voxel.pos * voxel_scale);
        uvs[vert_count + 3] = VOXEL_UVS[3];
        colors[vert_count + 3] = avg_color;
        normals[vert_count + 3] = VOXEL_NORMS[i];


        faces[face_count + 0] = vert_count + VOXEL_TRIS[i][0];
        faces[face_count + 1] = vert_count + VOXEL_TRIS[i][1];
        faces[face_count + 2] = vert_count + VOXEL_TRIS[i][2];

        faces[face_count + 3] = vert_count + VOXEL_TRIS[i][3];
        faces[face_count + 4] = vert_count + VOXEL_TRIS[i][4];
        faces[face_count + 5] = vert_count + VOXEL_TRIS[i][5];
    }
}
